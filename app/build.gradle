apply plugin: 'java'

sourceCompatibility = 1.11
targetCompatibility = 1.11

jar.doFirst {
	manifest {
		attributes("Implementation-Title": "Corelyzer Application",
        	"Implementation-Version": version)
    }
}

repositories {
	mavenCentral()
	maven {url 'https://maven.java.net/service/local/staging/deploy/maven2/'}
	maven {url 'https://repo.opennms.org/maven2/'}
	flatDir name: 'local', dirs: file('deps')
}

configurations {
	all*.exclude group:'asm'
	all*.exclude group:'ant'
	all*.exclude group: 'xml-apis'
}

dependencies {
	implementation project(':scenegraph')
	implementation 'javax.help:javahelp:2.0.02'
	implementation 'rome:rome:1.0'
	implementation 'xerces:xercesImpl:2.9.1' // use standard XML APIs?
	implementation 'com.intellij:javac2:7.0.3' // switch to MigLayout?
	implementation 'jexcelapi:jxl:2.6' // switch to POI?
	implementation 'net.java.dev.swing-layout:swing-layout:1.0.2' // switch to MigLayout?
	implementation 'com.miglayout:miglayout:3.7.4' // brg
	implementation 'net.java.dev.glazedlists:glazedlists_java15:1.8.0' // brg - required by iCores
	implementation 'org.apache.commons:commons-lang3:3.4'
	implementation 'commons-codec:commons-codec:1.2' // remove dependency
	implementation 'install4j:i4jruntime:3.2.4' // do we need this?
	implementation ':jdc:1.0.0' // switch to standard directory chooser?
	implementation ':jai_core:1.1.3'
	implementation ':jai_codec:1.1.3'
	implementation ':jai_imageio:1.1'
	implementation ':clibwrapper_jiio:1.1'
	implementation 'ch.qos.logback:logback-core:1.0.6'
	implementation 'ch.qos.logback:logback-classic:1.0.6'

	// brg 3/31/2022
	// There is a newer release of JOGL 2.4 that might be worth trying with regard to Windows
	// z-order bugs (popup, dialogs drawing behind canvas) in addition to other bugfixes:
	// https://jogamp.org/deployment/v2.4.0-rc-20210111/
	// Unclear if/when they'll ever do an official release of 2.4, so will need to use
	// approach described below (download and place in app/deps) until they do.


	// brg 6/24/2020
	// JOGL version 2.4 release candidates are required to resolve launch-time crash in macOS/OSX:
	// "Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason:
	// 'NSWindow drag regions should only be invalidated on the Main Thread!'"
	// Currently using JARs downloaded from v2.4.0-rc-20200307/ dir here, and placed in app/deps/:
	// https://jogamp.org/deployment/archive/rc/
	implementation group: 'org.jogamp.gluegen', name: 'gluegen-rt'
	implementation group: 'org.jogamp.gluegen', name: 'gluegen-rt-natives-windows-amd64'
	implementation group: 'org.jogamp.gluegen', name: 'gluegen-rt-natives-macosx-universal'
	implementation group: 'org.jogamp.gluegen', name: 'gluegen-rt-natives-linux-amd64'
	implementation group: 'org.jogamp.jogl', name: 'jogl-all'
	implementation group: 'org.jogamp.jogl', name: 'jogl-all-natives-windows-amd64'
	implementation group: 'org.jogamp.jogl', name: 'jogl-all-natives-macosx-universal'
	implementation group: 'org.jogamp.jogl', name: 'jogl-all-natives-linux-amd64'

	implementation('net.java.dev.stax-utils:stax-utils:20070216') {
		exclude group:'com.bea.xml'
	}
	implementation 'org.json:json:20140107'
	implementation 'com.opencsv:opencsv:5.0'
}

clean.doLast {
	ant.delete(dir: file('dist'), failonerror: false)
	ant.delete(dir: file('bin'), failonerror: false)
}

// 1/16/2024: Upon upgrading to Gradle 8, we could no longer use the
// default configuration to copy artifacts (app, scenegraph, and third-party
// .jar files) to dist. Customizing the default config like so seems to work?
configurations {
	resolvableDefaultConfig.extendsFrom(it.default)
	resolvableDefaultConfig.canBeResolved = true
}

build.doLast {
	copy {
		into file('dist')
		from configurations.resolvableDefaultConfig // see 1/16/2024 comment
		from configurations.resolvableDefaultConfig.allArtifacts.getFiles()
	}

	// To build and debug, VSCode depends on contents of build/classes/java being
	// copied into app/bin dir, but doesn't always do so on its own, unclear why.
	// Copy manually here.
	copy {
		into file('bin')
		from 'build/classes/java'

		// In addition to .class files, manually copy resources into bin dir. Unclear
		// why Gradle won't do so automagically. Our resources are in the default location
		// (src/main/resources). The default processResources task *does* recognize
		// newly-added/removed files in the resource path and adds/removes them correctly
		// to/from the bin dir. But on subsequent calls it does nothing...???
		from 'build/resources'
	}
}
