package corelyzer.data.dis;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;

import org.apache.xerces.parsers.DOMParser;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.jtechlabs.ui.widget.directorychooser.JDirectoryChooser;

import corelyzer.data.CRPreferences;
import corelyzer.remoteControl.server.controller.ControlServerApplication;
import corelyzer.ui.CorelyzerApp;

public class DISListsDialog extends JDialog {
	/**
	 * 
	 */
	private static final long serialVersionUID = -9188609346659799183L;
	private JPanel contentPane;
	private JButton buttonOK;
	private JButton refreshButton;
	private JButton loadButton;
	private JTextField disRootTextField;
	private JButton disRootChangeButton;
	private JTabbedPane tabbedPane;
	private JTable imageSectionTable;
	private JComboBox<String> disExportFileComboBox;
	private JComboBox<String> downholeLogDirComboBox;
	private JComboBox<String> msclDirComboBox;
	private JList<String> msclList;
	private JList<String> downholeLogList;

	final static String DIS_EXPORT_SUFFIX = "_dis.xml";
	final static String MSCL_SUFFIX = "_MSCL.xml";
	final static String NGR_SUFFIX = "_NGR.xml";

	final static String DIS_EXPORT_DIRNAME = "rms";
	final static String DOWNHOLELOG_DIRNAME = "Downhole_Logs";
	final static String MSCL_DIRNAME = "rms";
	final static String LOCAL_SLAB_IMAGE_DIR_PATH = "C:\\SlabbedCoreScans";
	final static String NOT_FOUND_URL = "NOT FOUND";

	static DISListsDialog instance;

	public static void main(final String[] args) {
		DISListsDialog dialog = new DISListsDialog(null);
		dialog.pack();
		dialog.setVisible(true);
		System.exit(0);
	}

	public DISListsDialog(final JFrame owner) {
		super(owner);

		$$$setupUI$$$();
		setContentPane(contentPane);
		setModal(true);
		getRootPane().setDefaultButton(buttonOK);

		buttonOK.addActionListener(new ActionListener() {

			public void actionPerformed(final ActionEvent e) {
				onOK();
			}
		});

		setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
		addWindowListener(new WindowAdapter() {

			@Override
			public void windowClosing(final WindowEvent e) {
				onCancel();
			}
		});

		contentPane.registerKeyboardAction(new ActionListener() {

			public void actionPerformed(final ActionEvent e) {
				onCancel();
			}
		}, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

		disRootChangeButton.addActionListener(new ActionListener() {

			public void actionPerformed(final ActionEvent actionEvent) {
				onChangeDISRoot();
			}
		});

		mySetup();
		refreshButton.addActionListener(new ActionListener() {

			public void actionPerformed(final ActionEvent actionEvent) {
				onRefresh();
			}
		});
		disExportFileComboBox.addActionListener(new ActionListener() {

			public void actionPerformed(final ActionEvent actionEvent) {
				refreshImageTab();
			}
		});
		loadButton.addActionListener(new ActionListener() {

			public void actionPerformed(final ActionEvent actionEvent) {
				onLoad();
			}
		});
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return contentPane;
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT
	 * edit this method OR call it in your code!
	 * 
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		createUIComponents();
		contentPane = new JPanel();
		contentPane.setLayout(new GridLayoutManager(3, 1, new Insets(10, 10, 10, 10), -1, -1));
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
		contentPane.add(panel1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
		final Spacer spacer1 = new Spacer();
		panel1.add(spacer1, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		final JPanel panel2 = new JPanel();
		panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		panel1.add(panel2, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		buttonOK = new JButton();
		buttonOK.setText("Close");
		panel2.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		refreshButton = new JButton();
		refreshButton.setText("Refresh");
		panel1.add(refreshButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		loadButton = new JButton();
		loadButton.setText("Load");
		panel1.add(loadButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JPanel panel3 = new JPanel();
		panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		contentPane.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(204,
				400), null, 0, false));
		tabbedPane = new JTabbedPane();
		panel3.add(tabbedPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200,
				200), null, 0, false));
		final JPanel panel4 = new JPanel();
		panel4.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
		tabbedPane.addTab("Images", panel4);
		final JLabel label1 = new JLabel();
		label1.setText("Data source: ");
		panel4.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label2 = new JLabel();
		label2.setText("Images: ");
		panel4.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JScrollPane scrollPane1 = new JScrollPane();
		panel4.add(scrollPane1, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0,
				false));
		scrollPane1.setViewportView(imageSectionTable);
		disExportFileComboBox = new JComboBox<String>();
		panel4.add(disExportFileComboBox, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JPanel panel5 = new JPanel();
		panel5.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
		tabbedPane.addTab("Downhole Logs", panel5);
		final JLabel label3 = new JLabel();
		label3.setText("Data source: ");
		panel5.add(label3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JScrollPane scrollPane2 = new JScrollPane();
		panel5.add(scrollPane2, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0,
				false));
		downholeLogList = new JList<String>();
		downholeLogList.setSelectionMode(0);
		scrollPane2.setViewportView(downholeLogList);
		final JLabel label4 = new JLabel();
		label4.setText("Log files: ");
		panel5.add(label4, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		downholeLogDirComboBox = new JComboBox<String>();
		panel5.add(downholeLogDirComboBox, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JPanel panel6 = new JPanel();
		panel6.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
		tabbedPane.addTab("MSCL Logs", panel6);
		final JLabel label5 = new JLabel();
		label5.setText("Data source: ");
		panel6.add(label5, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JScrollPane scrollPane3 = new JScrollPane();
		panel6.add(scrollPane3, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0,
				false));
		msclList = new JList<String>();
		msclList.setSelectionMode(0);
		scrollPane3.setViewportView(msclList);
		final JLabel label6 = new JLabel();
		label6.setText("Log files: ");
		panel6.add(label6, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		msclDirComboBox = new JComboBox<String>();
		panel6.add(msclDirComboBox, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JPanel panel7 = new JPanel();
		panel7.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
		contentPane
				.add(panel7, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
						| GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null,
						0, false));
		final JLabel label7 = new JLabel();
		label7.setText("DIS Root: ");
		panel7.add(label7, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		disRootTextField = new JTextField();
		disRootTextField.setEditable(false);
		panel7.add(disRootTextField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		disRootChangeButton = new JButton();
		disRootChangeButton.setIcon(new ImageIcon(getClass().getResource("/corelyzer/ui/resources/open.gif")));
		disRootChangeButton.setText("");
		disRootChangeButton.setToolTipText("Change DIS root directory");
		panel7.add(disRootChangeButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
	}

	private void createUIComponents() {
		imageSectionTable = new JTable() {
			private static final long serialVersionUID = 1L;

			@Override
			public Component prepareRenderer(final TableCellRenderer renderer, final int Index_row, final int Index_col) {

				Component comp = super.prepareRenderer(renderer, Index_row, Index_col);

				// even index, selected or not selected
				if (!isCellSelected(Index_row, Index_col)) {
					if (Index_row % 2 == 0) {
						comp.setBackground(new Color(239, 242, 255));
					} else {
						comp.setBackground(Color.white);
					}
				}

				return comp;
			}
		};
	}

	private void decorateImageTable() {
		DISImageTableModel model = new DISImageTableModel();
		// TableSorter sorter = new TableSorter(model);
		// sorter.setTableHeader(this.sectionListTable.getTableHeader());

		imageSectionTable.setModel(model); // !sorter

		// table decorations
		for (int i = 0; i < model.getColumnCount(); i++) {
			String header = model.getColumnName(i);

			imageSectionTable.getColumnModel().getColumn(i).setHeaderValue(header);
		}

		imageSectionTable.updateUI();
	}

	private List<String> getNameHierarchy(final Node node) {
		List<String> names = new ArrayList<String>();
		Node parent = node;
		while ((parent != null) && !"#document".equals(parent.getNodeName())) {
			names.add(0, parent.getAttributes().getNamedItem("name").getTextContent().trim());
			parent = parent.getParentNode();
		}
		return names;
	}

	private void loadInDownholeLogsTab() {
		String sp = System.getProperty("file.separator");

		String selected = downholeLogList.getSelectedValue().toString();
		final String logFilePath = disRootTextField.getText() + sp + DISListsDialog.DOWNHOLELOG_DIRNAME + sp + selected;

		Runnable r = new Runnable() {

			public void run() {
				DISOperationController.applySelectedDownholeLog(instance, logFilePath);
			}
		};

		new Thread(r).start();

		dispose();
	}

	private void loadInImageTab() {
		ControlServerApplication app = ControlServerApplication.getControlServer();

		int[] selectedRows;
		int sel = JOptionPane.showConfirmDialog(this, "Ignore CC(Core Catcher) sections?");

		if (sel == JOptionPane.YES_OPTION) {
			Vector<Integer> filtered = new Vector<Integer>();
			TableModel model = imageSectionTable.getModel();

			for (int row : imageSectionTable.getSelectedRows()) {
				String urlString = (String) model.getValueAt(row, DISImageTableModel.URL_INDEX);

				if (!urlString.toLowerCase().contains("corecatcher") && !urlString.equals(DISListsDialog.NOT_FOUND_URL)) {
					filtered.add(row);
				}
			}

			selectedRows = new int[filtered.size()];
			for (int i = 0; i < filtered.size(); i++) {
				selectedRows[i] = filtered.elementAt(i);
			}
		} else {
			selectedRows = imageSectionTable.getSelectedRows();
		}

		DISOperationController.applySelectedSections(this, app, imageSectionTable.getModel(), selectedRows);

		dispose();
	}

	private void loadInMSCLTab() {
		JOptionPane.showMessageDialog(this, "Depends on the size of the dataset file.\n"
				+ "It might take a while to load a large dataset.\nWe are working on making this faster.\n" + "Thank you for the patience.");

		String sp = System.getProperty("file.separator");
		String selected = msclList.getSelectedValue().toString();
		final String logFilePath = disRootTextField.getText() + sp + DISListsDialog.MSCL_DIRNAME + sp + selected;

		Runnable r = new Runnable() {

			public void run() {
				DISOperationController.applySelectedMSCLLog(instance, logFilePath);
			}
		};

		new Thread(r).start();

		dispose();
	}

	private void mySetup() {
		setTitle("Accessing Drilling Information System (DIS)");
		decorateImageTable();

		onUpdateDISRoot();

		instance = this;
	}

	private void onCancel() {
		dispose();
	}

	private void onChangeDISRoot() {
		File f = new File(disRootTextField.getText());

		if (!f.exists()) {
			f = new File(System.getProperty("user.home"));
		}

		if ((f = JDirectoryChooser.showDialog(this, f)) != null) {
			String abspath = f.getAbsolutePath();
			disRootTextField.setText(abspath);

			onUpdateDISRoot();

			// Also update user preferences.
			CorelyzerApp app = CorelyzerApp.getApp();
			if (app != null) {
				CRPreferences prefs = app.preferences();
				prefs.setProperty("dis.prefix", abspath);
			}
		}
	}

	private void onLoad() {
		int tabIndex = tabbedPane.getSelectedIndex();

		switch (tabIndex) {
			case 0: // image
				loadInImageTab();
				break;

			case 1: // downhole logs
				loadInDownholeLogsTab();
				break;

			case 2: // MSCL
				loadInMSCLTab();
				break;
		}
	}

	private void onOK() {
		dispose();
	}

	private void onRefresh() {
		int tabIndex = tabbedPane.getSelectedIndex();

		switch (tabIndex) {
			case 0:
				refreshImageTab();
				break;

			case 1:
				refreshDownholeLogsTab();
				break;

			case 2:
				refreshMSCLTab();
				break;
		}
	}

	private void onUpdateDISRoot() {
		String disRootString = System.getProperty("user.home");

		CorelyzerApp app = CorelyzerApp.getApp();

		if (app != null) {
			CRPreferences prefs = app.preferences();
			String disRoot = prefs.getProperty("dis.prefix");

			if ((disRoot != null) && !disRoot.equals("")) {
				disRootString = disRoot;
			}
		}

		disRootTextField.setText(disRootString);

		// Update ComboBox Models
		updateDISExportTab(disRootString);
		updateDownholeLogTab(disRootString);
		updateMSCLTab(disRootString);
	}

	private void refreshDownholeLogsTab() {
		String disRoot = disRootTextField.getText();
		updateDownholeLogTab(disRoot);
	}

	private void refreshImageTab() {
		// build our export file path
		String root = disRootTextField.getText();
		String exportFilePath = disRootTextField.getText() + File.separator + DISListsDialog.DIS_EXPORT_DIRNAME + File.separator
				+ disExportFileComboBox.getSelectedItem().toString();

		// clear the images table
		DISImageTableModel model = (DISImageTableModel) imageSectionTable.getModel();
		model.clear();

		// TODO: still need to detect local path
		boolean useHighRes = JOptionPane.showOptionDialog(this, "Would you like to use high resolution images if available?", "High Resolution Images",
				JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null) == JOptionPane.YES_OPTION;

		// parse the file
		DOMParser parser = new DOMParser();
		try {
			parser.setFeature("http://apache.org/xml/features/dom/include-ignorable-whitespace", false);
			parser.parse(exportFilePath);
		} catch (Exception e) {
			e.printStackTrace();
			JOptionPane.showMessageDialog(this, "Unable to parse " + exportFilePath, "Format Error", JOptionPane.ERROR_MESSAGE);
			return;
		}

		// grab the document and check that the root element is an EXPEDITION
		Document doc = parser.getDocument();
		Element e = doc.getDocumentElement();
		if (!e.getNodeName().equalsIgnoreCase("expedition")) {
			JOptionPane.showMessageDialog(this, "The first element is not EXPEDITION! '" + e.getNodeName(), "Format Error", JOptionPane.ERROR_MESSAGE);
			return;
		}
		String highResPath = e.getAttribute("highrespath");
		String topOffset = e.getAttribute("topoffset");
		String bottomOffset = e.getAttribute("bottomoffset");

		// find all images
		NodeList images = doc.getElementsByTagName("IMAGE");
		for (int i = 0; i < images.getLength(); i++) {
			Node img = images.item(i);
			Node section = img.getParentNode();
			List<String> names = getNameHierarchy(section);

			String top = section.getAttributes().getNamedItem("top_depth").getTextContent();
			String length = section.getAttributes().getNamedItem("length").getTextContent();
			model.addRow(names.get(0), names.get(1), names.get(2), names.get(3), names.get(4), "" + top, "" + length,
					resolve(img.getAttributes().getNamedItem("url").getTextContent(), root, highResPath, useHighRes), topOffset, bottomOffset);
		}
		imageSectionTable.updateUI();
	}

	private void refreshMSCLTab() {
		String disRoot = disRootTextField.getText();
		updateMSCLTab(disRoot);
	}

	private String resolve(final String path, final String rootPath, final String highResPath, final boolean useHighRes) {
		if (path.toLowerCase().startsWith("file:")) {
			// is a file
			String filePath = path.substring("FILE://".length());
			if (filePath.contains(":") && !rootPath.contains(":")) {
				// UNIXy so replace the drive letter and slashes
				int colon = filePath.indexOf(':');
				filePath = filePath.substring(colon + 2).replace('\\', File.separatorChar);
			}

			// create a file object and walk the path list
			File root = new File(rootPath);
			String relative = filePath;
			File file = new File(root, relative);
			while (!file.exists() && relative.contains(File.separator)) {
				relative = relative.substring(relative.indexOf(File.separatorChar) + 1);
				file = new File(root, relative);
			}
			if (!file.exists()) {
				System.err.println("Unable to resolve file path [" + filePath + "]");
				return NOT_FOUND_URL;
			}

			// try to find high res versions
			if (useHighRes) {
				String name = file.getName();

				// try local first
				File local = new File(LOCAL_SLAB_IMAGE_DIR_PATH);
				if (new File(local, name).exists()) {
					try {
						return new File(local, name).toURI().toURL().toExternalForm();
					} catch (MalformedURLException e) {
						// should never happen
					}
				}

				// try highResPath next
				String remoteHighRes = highResPath;
				if (highResPath.contains(":") && !rootPath.contains(":")) {
					int colon = remoteHighRes.indexOf(':');
					remoteHighRes = remoteHighRes.substring(colon + 2).replace('\\', File.separatorChar);
				}
				File remote = new File(root, remoteHighRes);
				while (!remote.exists() && remoteHighRes.contains(File.separator)) {
					remoteHighRes = remoteHighRes.substring(remoteHighRes.indexOf(File.separatorChar) + 1);
					remote = new File(root, remoteHighRes);
				}
				if (remote.exists() && new File(remote, name).exists()) {
					try {
						return new File(remote, name).toURI().toURL().toExternalForm();
					} catch (MalformedURLException e) {
						// should never happen
					}
				}
			}

			// return the original file
			try {
				return file.toURI().toURL().toExternalForm();
			} catch (MalformedURLException e) {
				// should never happen
			}
			return NOT_FOUND_URL;
		} else {
			// is a url
			String url = path.replace('\\', '/');
			try {
				return new URL(url).toExternalForm();
			} catch (MalformedURLException e) {
				System.err.println("Unable to resolve url path [" + path + "]");
				return NOT_FOUND_URL;
			}
		}
	}

	private void updateDISExportTab(final String disRootString) {
		DefaultComboBoxModel<String> model = new DefaultComboBoxModel<String>();

		String sp = System.getProperty("file.separator");
		String exportDirString = disRootString + sp + DISListsDialog.DIS_EXPORT_DIRNAME;
		File exportDir = new File(exportDirString);

		if (!exportDir.exists()) {
			return;
		}

		for (File f : exportDir.listFiles()) {
			if (f.exists() && f.isFile()) {
				if (f.getName().endsWith(DISListsDialog.DIS_EXPORT_SUFFIX)) {
					model.addElement(f.getName());
				}
			}
		}

		disExportFileComboBox.setModel(model);
	}

	private void updateDownholeLogTab(final String disRootString) {
		DefaultComboBoxModel<String> model = new DefaultComboBoxModel<String>();

		String sp = System.getProperty("file.separator");
		String downholeLogPath = disRootString + sp + DOWNHOLELOG_DIRNAME;

		model.addElement(downholeLogPath);
		downholeLogDirComboBox.setModel(model);

		// Also update the list
		File downholeLogDir = new File(downholeLogPath);

		if (!downholeLogDir.exists()) {
			JOptionPane.showMessageDialog(this, "'" + downholeLogDir + "' doesn't exist.");

			DefaultListModel<String> listModel = new DefaultListModel<String>();
			downholeLogList.setModel(listModel);

			return;
		}

		DefaultListModel<String> listModel = new DefaultListModel<String>();

		for (File f : downholeLogDir.listFiles()) {
			if (f.exists() && f.isFile()) {
				listModel.addElement(f.getName());
			}
		}

		downholeLogList.setModel(listModel);
		downholeLogList.updateUI();
	}

	private void updateMSCLTab(final String disRootString) {
		DefaultComboBoxModel<String> model = new DefaultComboBoxModel<String>();

		String sp = System.getProperty("file.separator");
		String msclLogPath = disRootString + sp + MSCL_DIRNAME;

		model.addElement(msclLogPath);
		msclDirComboBox.setModel(model);

		// Also update the list
		File msclDir = new File(msclLogPath);

		if (!msclDir.exists()) {
			JOptionPane.showMessageDialog(this, "'" + msclDir + "' doesn't exist.");

			DefaultListModel<String> listModel = new DefaultListModel<String>();
			msclList.setModel(listModel);

			return;
		}

		DefaultListModel<String> listModel = new DefaultListModel<String>();

		for (File f : msclDir.listFiles()) {
			if (f.exists() && f.isFile()) {
				if (f.getName().endsWith(DISListsDialog.MSCL_SUFFIX) || f.getName().endsWith(DISListsDialog.NGR_SUFFIX)) {
					listModel.addElement(f.getName());
				}
			}
		}

		msclList.setModel(listModel);
		msclList.updateUI();
	}
}
