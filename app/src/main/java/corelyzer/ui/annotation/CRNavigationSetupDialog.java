package corelyzer.ui.annotation;

import java.awt.Dimension;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Vector;

import javax.swing.BorderFactory;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.KeyStroke;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import corelyzer.controller.CRExperimentController;
import corelyzer.data.ChatGroup;
import corelyzer.data.CoreSection;
import corelyzer.data.TrackSceneNode;
import corelyzer.graphics.SceneGraph;
import corelyzer.ui.CorelyzerApp;

public class CRNavigationSetupDialog extends JDialog {
	/**
	 * 
	 */
	private static final long serialVersionUID = -831835273128909291L;

	public static void main(final String[] args) {
		CRNavigationSetupDialog dialog = new CRNavigationSetupDialog();
		dialog.pack();
		dialog.setVisible(true);
		System.exit(0);
	}

	private JPanel contentPane;
	private JButton buttonOK;
	private JButton buttonCancel;
	private JComboBox<String> waypointTypeComboBox;
	private JTextField pauseTextField;
	private JCheckBox autoScaleCheckBox;

	private JCheckBox loopCheckbox;

	{
		// GUI initializer generated by IntelliJ IDEA GUI Designer
		// >>> IMPORTANT!! <<<
		// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	public CRNavigationSetupDialog() {
		decorateAnnoTypeComboBox();
		setTitle("Auto-Navigation Setup");
		setContentPane(contentPane);
		setModal(true);
		getRootPane().setDefaultButton(buttonOK);

		buttonOK.addActionListener(new ActionListener() {

			public void actionPerformed(final ActionEvent e) {
				onOK();
			}
		});

		buttonCancel.addActionListener(new ActionListener() {

			public void actionPerformed(final ActionEvent e) {
				onCancel();
			}
		});

		setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
		addWindowListener(new WindowAdapter() {

			@Override
			public void windowClosing(final WindowEvent e) {
				onCancel();
			}
		});

		contentPane.registerKeyboardAction(new ActionListener() {

			public void actionPerformed(final ActionEvent e) {
				onCancel();
			}
		}, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return contentPane;
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT
	 * edit this method OR call it in your code!
	 * 
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		contentPane = new JPanel();
		contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
		contentPane.setBorder(BorderFactory.createTitledBorder("Navigation Parameters"));
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
		contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
		final Spacer spacer1 = new Spacer();
		panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		final JPanel panel2 = new JPanel();
		panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
		panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		buttonOK = new JButton();
		buttonOK.setText("Start");
		panel2.add(buttonOK, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		buttonCancel = new JButton();
		buttonCancel.setText("Cancel");
		panel2.add(buttonCancel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JPanel panel3 = new JPanel();
		panel3.setLayout(new GridLayoutManager(5, 2, new Insets(0, 0, 0, 0), -1, -1));
		contentPane
				.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
						| GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null,
						0, false));
		final JLabel label1 = new JLabel();
		label1.setHorizontalAlignment(10);
		label1.setText("Annotation type: ");
		panel3.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final Spacer spacer2 = new Spacer();
		panel3.add(spacer2, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1,
				GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		waypointTypeComboBox = new JComboBox<String>();
		final DefaultComboBoxModel<String> defaultComboBoxModel1 = new DefaultComboBoxModel<String>();
		defaultComboBoxModel1.addElement("Lithology (freeform)");
		defaultComboBoxModel1.addElement("Educational (freeform)");
		defaultComboBoxModel1.addElement("Operational (freeform)");
		defaultComboBoxModel1.addElement("Clast");
		defaultComboBoxModel1.addElement("SampleRequest");
		waypointTypeComboBox.setModel(defaultComboBoxModel1);
		panel3.add(waypointTypeComboBox, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label2 = new JLabel();
		label2.setText("Pause between each waypoint (seconds): ");
		label2.setToolTipText("Time (in seconds) paused between waypoints.");
		panel3.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		pauseTextField = new JTextField();
		pauseTextField.setHorizontalAlignment(11);
		pauseTextField.setText("5");
		pauseTextField.setToolTipText("Time (in seconds) paused between waypoints.");
		panel3.add(pauseTextField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		autoScaleCheckBox = new JCheckBox();
		autoScaleCheckBox.setEnabled(false);
		autoScaleCheckBox.setText("Auto-scale?");
		panel3.add(autoScaleCheckBox, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		loopCheckbox = new JCheckBox();
		loopCheckbox.setEnabled(false);
		loopCheckbox.setText("Loop?");
		panel3.add(loopCheckbox, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
	}

	private void decorateAnnoTypeComboBox() {
		Vector<String> types = new Vector<String>();
		for (int i = 0; i < ChatGroup.getNumberOfGroups(); i++) {
			types.add(ChatGroup.getGroupName(i));
		}
		ComboBoxModel<String> model = new DefaultComboBoxModel<String>(types);
		this.waypointTypeComboBox.setModel(model);
	}

	// return 2 arrays of x_pos and y_pos of selected annotation group
	private Float[][] gatherAnnotationCoordinates(final int selectedGroup) {
		CorelyzerApp app = CorelyzerApp.getApp();
		if (app == null) {
			return null;
		}

		Vector<Float> xpos = new Vector<Float>();
		Vector<Float> ypos = new Vector<Float>();

		// Traverse current scene and collect freeform annotation info
		// Track
		int numberOfTracks = app.getTrackListModel().size();
		for (int i = 0; i < numberOfTracks; i++) {
			TrackSceneNode t = (TrackSceneNode) app.getTrackListModel().elementAt(i);

			int tId = t.getId();
			// String trackName = t.getName();
			float trackOffsetX = SceneGraph.getTrackXPos(tId);
			float trackOffsetY = SceneGraph.getTrackYPos(tId);

			// Section
			for (int j = 0; j < t.getNumCores(); j++) {
				CoreSection cs = t.getCoreSection(j);

				int csId = cs.getId();
				// String csName = cs.getName();
				float sectionOffsetX = SceneGraph.getSectionXPos(tId, csId);
				float sectionOffsetY = SceneGraph.getSectionYPos(tId, csId);

				// Annotations
				int numberOfMarkers = SceneGraph.getNumCoreSectionMarkers(tId, csId);

				for (int k = 0; k < numberOfMarkers; k++) {
					String url = SceneGraph.getCoreSectionMarkerURL(tId, csId, k);
					if (url == null) {
						continue;
					}

					int group = SceneGraph.getCoreSectionMarkerGroup(tId, csId, k);
					if (group != selectedGroup) { // only pick up specified
													// group
						continue;
					}

					// boolean visible =
					// SceneGraph.getCoreSectionMarkerVisibility(
					// tId, csId, k);

					// int type = SceneGraph.getCoreSectionMarkerType(tId, csId,
					// k);
					float pX = SceneGraph.getCoreSectionMarkerXPos(tId, csId, k);
					float pY = SceneGraph.getCoreSectionMarkerYPos(tId, csId, k);

					float dpix = SceneGraph.getCanvasDPIX(0);
					float dpiy = SceneGraph.getCanvasDPIY(0);

					// convert to meters
					float depth = (trackOffsetX + sectionOffsetX + pX) * 2.54f / (100.0f * dpix);
					float trackPos = (trackOffsetY + sectionOffsetY + pY) * 2.54f / (100.0f * dpiy);

					xpos.add(depth);
					ypos.add(trackPos);
				} // end of markers
			} // end of section
		} // end of track

		if (xpos.size() != ypos.size()) {
			System.err.println("Something is very odd. xpos and ypos size doesn't match");
		}

		int size = xpos.size() > ypos.size() ? xpos.size() : ypos.size();
		Float[][] retArray = new Float[2][size];

		xpos.toArray(retArray[0]);
		ypos.toArray(retArray[1]);

		return retArray;
	}

	private void onCancel() {
		dispose();
	}

	private void onOK() {
		final CorelyzerApp app = CorelyzerApp.getApp();

		if (app == null) {
			JOptionPane.showMessageDialog(this, "No Corelyzer Main App");
			return;
		}

		// in meters
		Float[][] waypoints = gatherAnnotationCoordinates(waypointTypeComboBox.getSelectedIndex());

		// #ifdef DEBUG
		// int size1 = waypoints.length;
		// int size2 = waypoints[0].length;
		// System.out.println("---> Haha: " + size1 + ", " + size2);
		// #endif

		if (waypoints == null || waypoints.length < 2 || waypoints[0] == null || waypoints[1] == null) {
			JOptionPane.showMessageDialog(this, "Invalid annotation positions");
			dispose();
			return;
		}

		try {
			int pause = Integer.parseInt(this.pauseTextField.getText());

			CRExperimentController.navigate(waypoints[0], waypoints[1], pause);
		} catch (NumberFormatException e) {
			String mesg = "Please input a number in the \'Pause between...\' " + "textfield";
			JOptionPane.showMessageDialog(this, mesg);
		}

		dispose();
	}
}
