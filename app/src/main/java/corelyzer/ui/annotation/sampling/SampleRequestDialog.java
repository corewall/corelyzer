/******************************************************************************
 *
 * CoreWall / Corelyzer - An Initial Core Description Tool
 * Copyright (C) 2007 Julian Yu-Chung Chen
 * Electronic Visualization Laboratory, University of Illinois at Chicago
 *
 * This software is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either Version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser Public License along
 * with this software; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 * Questions or comments about CoreWall should be directed to
 * cavern@evl.uic.edu
 *
 *****************************************************************************/

package corelyzer.ui.annotation.sampling;

import java.awt.Dimension;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Enumeration;
import java.util.Hashtable;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.text.JTextComponent;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import corelyzer.data.CRPreferences;
import corelyzer.data.ChatGroup;
import corelyzer.data.MarkerType;
import corelyzer.graphics.SceneGraph;
import corelyzer.ui.CorelyzerApp;
import corelyzer.ui.annotation.AbstractAnnotationDialog;
import corelyzer.util.PropertyListUtility;

public class SampleRequestDialog extends AbstractAnnotationDialog {
	/**
	 * 
	 */
	private static final long serialVersionUID = -7002560842376344381L;

	public static void main(final String[] args) {
		SampleRequestDialog dialog = new SampleRequestDialog();
		dialog.pack();
		dialog.setVisible(true);
		System.exit(0);
	}

	private JPanel contentPane;
	private JButton saveButton;
	private JButton closeButton;
	private JTextField nameField;
	private JTextField dateField;
	private JTextField sampleTypeField;
	private JTextField sampleLocationField;
	private JTextArea notesArea;
	private JTextField contactField;
	private JButton sendButton;
	private JTextField trackNameField;
	private JTextField coreNameField;
	private JTextField requestIdField;
	private JButton deleteButton;

	private JTextField sessionNameField;

	// private Hashtable<String, String> attribs;
	private final Hashtable<String, JTextComponent> textCompos;

	{
		// GUI initializer generated by IntelliJ IDEA GUI Designer
		// >>> IMPORTANT!! <<<
		// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	public SampleRequestDialog() {
		super();

		// Model init
		textCompos = new Hashtable<String, JTextComponent>();
		buildTextUIHash();

		// View init
		setTitle("Sample Request Form");

		setContentPane(contentPane);
		setModal(true);
		getRootPane().setDefaultButton(saveButton);

		saveButton.addActionListener(new ActionListener() {
			public void actionPerformed(final ActionEvent e) {
				onSave();
			}
		});

		closeButton.addActionListener(new ActionListener() {
			public void actionPerformed(final ActionEvent e) {
				onClose();
			}
		});

		setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
		addWindowListener(new WindowAdapter() {
			public void windowClosing(final WindowEvent e) {
				onClose();
			}
		});

		contentPane.registerKeyboardAction(new ActionListener() {
			public void actionPerformed(final ActionEvent e) {
				onClose();
			}
		}, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

		// Init text fields
		nameField.setText(System.getProperty("user.name"));

		Date now = new Date(System.currentTimeMillis());
		SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyy hh:mm:ss a z");
		String time = format.format(now);

		dateField.setText(time);
		sendButton.addActionListener(new ActionListener() {
			public void actionPerformed(final ActionEvent actionEvent) {
				onSend();
			}
		});

		deleteButton.addActionListener(new ActionListener() {
			public void actionPerformed(final ActionEvent actionEvent) {
				onDelete();
			}
		});
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return contentPane;
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT
	 * edit this method OR call it in your code!
	 * 
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		contentPane = new JPanel();
		contentPane.setLayout(new GridLayoutManager(3, 1, new Insets(10, 10, 10, 10), -1, -1));
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
		contentPane.add(panel1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
		final Spacer spacer1 = new Spacer();
		panel1.add(spacer1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		final JPanel panel2 = new JPanel();
		panel2.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
		panel1.add(panel2, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		closeButton = new JButton();
		closeButton.setText("Cancel");
		panel2.add(closeButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		saveButton = new JButton();
		saveButton.setText("Save");
		panel2.add(saveButton, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		deleteButton = new JButton();
		deleteButton.setText("Delete");
		panel2.add(deleteButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		sendButton = new JButton();
		sendButton.setEnabled(false);
		sendButton.setText("Send...");
		panel1.add(sendButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JPanel panel3 = new JPanel();
		panel3.setLayout(new GridLayoutManager(9, 2, new Insets(0, 0, 0, 0), -1, -1));
		contentPane
				.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
						| GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null,
						0, false));
		final JLabel label1 = new JLabel();
		label1.setText("Investigator");
		panel3.add(label1, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label2 = new JLabel();
		label2.setText("Sample Type");
		panel3.add(label2, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		nameField = new JTextField();
		nameField.setText("");
		nameField.setToolTipText("Please input your name here");
		panel3.add(nameField, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		sampleTypeField = new JTextField();
		sampleTypeField.setToolTipText("thin section, 2cc micropaleo, pmag, etc.");
		panel3.add(sampleTypeField, new GridConstraints(7, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		final JLabel label3 = new JLabel();
		label3.setText("Contact Information");
		panel3.add(label3, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		contactField = new JTextField();
		contactField.setToolTipText("Please leave your contact information, email or phone number");
		panel3.add(contactField, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		final JLabel label4 = new JLabel();
		label4.setEnabled(false);
		label4.setText("Request ID");
		panel3.add(label4, new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		requestIdField = new JTextField();
		requestIdField.setEditable(false);
		requestIdField.setEnabled(false);
		requestIdField.setText("N/A");
		requestIdField.setToolTipText("Request ID given from backend sample request database");
		panel3.add(requestIdField, new GridConstraints(8, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		final JLabel label5 = new JLabel();
		label5.setText("Track Name");
		panel3.add(label5, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		trackNameField = new JTextField();
		trackNameField.setEditable(false);
		panel3.add(trackNameField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		final JLabel label6 = new JLabel();
		label6.setText("Section Name");
		panel3.add(label6, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		coreNameField = new JTextField();
		coreNameField.setEditable(false);
		panel3.add(coreNameField, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		final JLabel label7 = new JLabel();
		label7.setText("Session Name");
		panel3.add(label7, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		sessionNameField = new JTextField();
		sessionNameField.setEditable(false);
		panel3.add(sessionNameField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		final JLabel label8 = new JLabel();
		label8.setText("Sample Location (cm): ");
		panel3.add(label8, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		sampleLocationField = new JTextField();
		sampleLocationField.setEditable(false);
		sampleLocationField.setEnabled(true);
		sampleLocationField.setText("");
		sampleLocationField.setToolTipText("Upper-Left Corner - LowerRightCorner, relative to the lower-right corner of this core section");
		panel3.add(sampleLocationField, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(250, -1), null, 0, false));
		final JLabel label9 = new JLabel();
		label9.setText("Date");
		panel3.add(label9, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		dateField = new JTextField();
		dateField.setEditable(false);
		panel3.add(dateField, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		final JPanel panel4 = new JPanel();
		panel4.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		contentPane
				.add(panel4, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
						| GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null,
						0, false));
		panel4.setBorder(BorderFactory.createTitledBorder("Note"));
		final JScrollPane scrollPane1 = new JScrollPane();
		panel4.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0,
				false));
		notesArea = new JTextArea();
		scrollPane1.setViewportView(notesArea);
	}

	private void buildTextUIHash() {
		this.textCompos.put("username", this.nameField);
		this.textCompos.put("contact", this.contactField);
		this.textCompos.put("date", this.dateField);
		this.textCompos.put("sampleType", this.sampleTypeField);
		this.textCompos.put("sampleLocation", this.sampleLocationField);
		this.textCompos.put("notes", this.notesArea);

		this.textCompos.put("sessionname", this.sessionNameField);
		this.textCompos.put("trackname", this.trackNameField);
		this.textCompos.put("corename", this.coreNameField);
		this.textCompos.put("requestid", this.requestIdField);
	}

	public void collectViewInfo() {
		if (this.attribs != null) {
			// Defaults
			attribs.put("username", this.textCompos.get("username").getText());
			attribs.put("date", this.textCompos.get("date").getText());
			attribs.put("notes", this.textCompos.get("notes").getText());

			// Circled area
			float scale = SceneGraph.getCanvasDPIX(0) / 2.54f;

			float ulx = this.upperLeftPoint[0] / scale;
			float uly = this.upperLeftPoint[1] / scale;
			float lrx = this.lowerRightPoint[0] / scale;
			float lry = this.lowerRightPoint[1] / scale;

			attribs.put("starting_depth", String.format("%.3f", ulx));
			attribs.put("starting_width", String.format("%.3f", uly));
			attribs.put("ending_depth", String.format("%.3f", lrx));
			attribs.put("ending_width", String.format("%.3f", lry));

			// Sample-specifics
			attribs.put("contact", this.textCompos.get("contact").getText());
			attribs.put("sampleType", this.textCompos.get("sampleType").getText());
			attribs.put("sampleLocation", this.textCompos.get("sampleLocation").getText());
			attribs.put("requestid", this.textCompos.get("requestid").getText());
		}
	}

	public String generateFilename() {
		// Get user and time info
		String user = System.getProperty("user.name");

		Date today = new Date();
		SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyy hh:mm:ss a z");
		String now = formatter.format(today);
		String title = "Annotation by " + user + "@\"" + now + "\"";
		System.out.println("Last edited by:\n" + title);

		// shorter string for annotation filename
		formatter = new SimpleDateFormat("MMddyyyyhhmmssz");
		now = formatter.format(today);

		// Save it into somewhere, with some unique naming
		// String cwd = System.getProperty("user.dir");
		CRPreferences prefs = CorelyzerApp.getApp().preferences();
		String sp = System.getProperty("file.separator");

		String anno_dir = prefs.annotation_Directory;
		String filename = "sampling_annotation_" + trackId + "_" + sectionId + "_" + markerId + "_" + user + "_" + now + ".plist";

		return anno_dir + sp + filename;
	}

	public Hashtable<String, String> getAttributes() {
		return attribs;
	}

	public String getValueFromKey(final String key) {
		return attribs.get(key);
	}

	private void onClose() {
		dispose();
	}

	private void onSave() {
		System.out.println("---> Creating annotation in (trackId, sectionId) " + trackId + ", " + sectionId);

		collectViewInfo();

		// Create annotation content and save to an annotation(HTML) file
		SceneGraph.lock();
		{
			// ps. x_pos, y_pos are scenepos in GL context space
			float markerX;
			float markerY;

			if (markerId == -1) {
				markerX = (upperLeftPoint[0] + lowerRightPoint[0]) / 2.0f;
				markerY = (upperLeftPoint[1] + lowerRightPoint[1]) / 2.0f;

				markerId = SceneGraph.createCoreSectionMarker(trackId, sectionId, ChatGroup.SAMPLE, MarkerType.CORE_OUTLINE_MARKER, markerX, -markerY / 2);

				SceneGraph.setCoreSectionMarkerVertex(trackId, sectionId, markerId, markerX, -markerY / 2, this.upperLeftPoint[0], this.upperLeftPoint[1],
						this.lowerRightPoint[0], this.lowerRightPoint[1]);
			}

			if (markerId != -1) {
				// Summarize information collected and transform them into
				// clast annotations
				File aFile;

				String localFilePath = SceneGraph.getCoreSectionMarkerLocal(trackId, sectionId, markerId);

				// Check if newly add or editing
				if (localFilePath == null || localFilePath.equalsIgnoreCase("")) {
					aFile = new File(generateFilename());

					SceneGraph.setCoreSectionMarkerLocal(trackId, sectionId, markerId, aFile.getAbsolutePath());
				} else {
					aFile = new File(localFilePath);
				}

				// For DIS Export
				String preState = attribs.get("anno_state");
				if (preState == null || preState.equals("")) {
					attribs.put("anno_state", "added");
				} else if (preState.equalsIgnoreCase("unchanged")) {
					attribs.put("anno_state", "edited");
				}

				attribs.put("anno_app", "CLR");
				attribs.put("anno_class", "CLR_sampling");

				PropertyListUtility.saveHashtableToProperListFile(attribs, aFile);
			}
		}
		SceneGraph.unlock();

		CorelyzerApp.getApp().updateGLWindows();
		dispose();
	}

	private void onSend() {
		// Fill in 'request id' field and save a local copy. Maybe send along
		// the CML or CAR file.
		JOptionPane.showMessageDialog(this, "[TODO] Send the form using external mail client or some " + "backend infrastructure");

		// testing integration with the ANDRILL SMS system...
		/*
		 * try { // get our attributes collectViewInfo();
		 * 
		 * // build our payload for POSTing StringBuffer payload = new
		 * StringBuffer(); for (Entry<String, String> entry :
		 * attribs.entrySet()) {
		 * payload.append(URLEncoder.encode(entry.getKey(), "UTF-8"));
		 * payload.append("=");
		 * payload.append(URLEncoder.encode(entry.getValue(), "UTF-8"));
		 * payload.append("&"); }
		 * 
		 * // connect to the service and POST the data URL url = new
		 * URL("http://157.132.101.160:8080/samplecatcher/sample/create");
		 * URLConnection conn = url.openConnection(); conn.setDoOutput(true);
		 * OutputStreamWriter wr = new
		 * OutputStreamWriter(conn.getOutputStream());
		 * wr.write(payload.toString()); wr.flush();
		 * 
		 * // get the response BufferedReader rd = new BufferedReader(new
		 * InputStreamReader(conn.getInputStream())); String line; while ((line
		 * = rd.readLine()) != null) { JOptionPane.showMessageDialog(this,
		 * "SMS Response: " + line); } wr.close(); rd.close();
		 * 
		 * // call save onSave(); } catch (Exception e) { e.printStackTrace(); }
		 */
	}

	private void resetViewStatus() {
		// Text components
		Enumeration<String> keys = this.textCompos.keys();
		while (keys.hasMoreElements()) {
			String aKey = keys.nextElement();
			JTextComponent aTextComponent = textCompos.get(aKey);
			if (aTextComponent != null) {
				aTextComponent.setText("");
			}
		}
	}

	public void setAttributes(final Hashtable<String, String> aDict) {
		attribs = aDict;

		// For DIS Export
		String annoClass = attribs.get("anno_class");
		if (annoClass == null || annoClass.equals("")) {
			attribs.put("anno_class", "CLR_sampling");
		}

		syncAttribsToView();
	}

	public void setCoreName(final String aName) {
		this.coreNameField.setText(aName);
	}

	// (ulx, uly), (lrx, lry) are in physical absolute coordinates
	// This dialog displays points's location relative to the start (upperleft)
	// of this core section
	public void setRange(float ulx, float uly, float lrx, float lry) {
		super.setRange(ulx, uly, lrx, lry);

		// Fill in mbsf interval
		float scale = SceneGraph.getCanvasDPIX(0) / 2.54f;

		ulx = this.upperLeftPoint[0] / scale;
		uly = this.upperLeftPoint[1] / scale;
		lrx = this.lowerRightPoint[0] / scale;
		lry = this.lowerRightPoint[1] / scale;

		// fill in sampleLocationField in cm
		String locationText = "(" + String.format("%.3f", ulx) + ", " + String.format("%.3f", uly) + ") - (" + String.format("%.3f", lrx) + ", "
				+ String.format("%.3f", lry) + ")";
		this.sampleLocationField.setText(locationText);
	}

	public void setTrackName(final String aName) {
		this.trackNameField.setText(aName);
	}

	public void setValueForKey(final String key, final String value) {
		super.setValueForKey(key, value);
		syncAttribsToView();
	}

	public void setVisible(final boolean b) {
		String[] array = { "sessionname", "trackname", "corename", "username", "date" };
		for (String s : array) {
			this.textCompos.get(s).setText(this.getValueFromKey(s));
		}

		super.setVisible(b);
	}

	private void syncAttribsToView() {
		resetViewStatus();

		Enumeration<String> e = attribs.keys();
		while (e.hasMoreElements()) {
			String aKey = e.nextElement();

			JTextComponent textCompo = textCompos.get(aKey);
			String value = this.attribs.get(aKey);

			if (textCompo != null) {
				textCompo.setText(value);
			}
		}
	}
}
