apply plugin: 'java'

sourceCompatibility = 1.11
targetCompatibility = 1.11

jar.doFirst {
	manifest {
		attributes("Implementation-Title": "Corelyzer Scenegraph Library",
                      "Implementation-Version": version)
	}
} 

clean.doLast {
	ant.delete(dir: file('bin'), failonerror: false)
}

build.doLast {
	tasks.generateVSCodeBin
}

// Use javac -h flag to build JNI header for SceneGraph.java.
// Separate javah call is no longer needed, and javah has been
// removed from JDK version 11.
compileJava {
	def build = new File(project.buildDir, 'cpp')
	options.compilerArgs += ["-h", "${build}"]
}

tasks.register('cleanDist') {
	group = "Custom"
	description = "Removes dist directory"
	doLast {
		ant.delete(dir: file('dist'), failonerror: false)
	}
}

tasks.register('copyJNIFiles') {
	dependsOn tasks.build
	group = "Custom"
	description = "Copies generated scenegraph.jar into dist directory"
	doLast {
		// copy scenegraph jar into dist
		copy {
			into file('dist')
			from configurations.default.allArtifacts.getFiles()
		}

		// copy generated Scenegraph JNI header into src
		file('build/cpp').eachFileMatch({it.endsWith('.h')}) { f ->
			copy {
				into file('src/main/cpp')
				from f
			}
		}
	}
}

// To build and debug, VSCode seems to depend on contents of scenegraph/build/classes/java
// being copied into scenegraph/bin, but doesn't always do so on its own, unclear why.
// Copy manually here. 
tasks.register('generateVSCodeBin') {
	dependsOn tasks.build
	group = "Custom"
	description = "Copies generated classes into bin dir, used on launch/debug from VSCode"
	mkdir('bin')
	copy {
		into file('bin')
		from 'build/classes/java/'
	}
}

tasks.register('buildJNIMac') {
	dependsOn tasks.copyJNIFiles
	group = "Custom"
	description = "Builds Java and macOS JNI binary for scenegraph"
	doLast {
		def build = new File(project.buildDir, 'cpp')
		def dist = file('dist')
		def src = file('src/main/cpp')
		def deps = file('deps/mac')
		def includes = [
			src.absolutePath,
			dist.absolutePath,
			build.absolutePath,
			'/Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Home/include',
			'/Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Home/include/darwin',
			file('deps/mac/include').absolutePath,
			file('deps/mac/include/freetype2').absolutePath]

		// compile
		mkdir(build)
		src.eachFileMatch({ it.endsWith('.c') || it.endsWith('.cpp')} ) { file ->
			compileMac(file, 'x86_64', includes, build)
		}

		// link
		def libs = file('deps/mac/lib').listFiles().findAll { it.name.endsWith('.a') }
		def rfile = file('src/main/cpp/mac.r')
		linkMac('x86_64', libs, rfile, build)

		// lipo
		ant.exec(executable: 'lipo', dir: build, failonerror: true) {
			arg(value: '-create')
			arg(value: '-arch')
			arg(value: 'x86_64')
			arg(value: 'x86_64.jnilib')
			arg(value: '-output')
			arg(path: new File(dist, 'libscenegraph.jnilib'))
		}
	}
}

def linkMac(arch, libs, rfile, dir) {
	ant {
		echo("Linking ${arch}.jnilib")
		exec(executable: 'c++', dir: dir, failonerror: true) {
			arg(value: '-mmacosx-version-min=10.10')
			arg(value: '-g')
			arg(value: '-bundle')
			arg(value: '-isysroot')
			arg(value: '/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk')
			arg(value: '-O')
			arg(value: '-arch')
			arg(value: arch)
			arg(value: '-framework')
			arg(value: 'OpenGL')
			arg(value: '-lstdc++')
			arg(value: '-lpthread')
			arg(value: '-o')
			arg(value: "${arch}.jnilib")
			dir.listFiles().findAll { it.name.endsWith(arch) }.each { arg(path: it) }
			libs.each { arg(path: it) }
		}
		exec(executable: 'Rez', dir: dir, failonerror: true) {
			arg(value: '-t')
			arg(value: 'APPL')
			arg(value: '-o')
			arg(value: "${arch}.jnilib")
			arg(path: rfile)
		}
	}
}

def compileMac(src, arch, includes, dir) {
	def out = src.name.substring(0, src.name.lastIndexOf('.') + 1) + "${arch}"
	ant {
		echo("Compiling ${src.name} for Mac ${arch}")
		exec(executable: 'c++', dir: dir, logError: true, failonerror: true) {
			arg(value: '-mmacosx-version-min=10.10')
			arg(value: '-c')
			arg(value: '-isysroot')
			arg(value: '/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk')
			arg(value: '-O')
			arg(value: '-arch')
			arg(value: arch)
			arg(value: '-fPIC')
			if (arch != 'ppc') {
				arg(value: '-DUSE_FASTDXT')
			}
			arg(value: '-FOpenGL')
			includes.each { arg(value: "-I${it}") }
			arg(value: '-o')
			arg(value: out)
			arg(path: src)
		}
	}
}

tasks.register('buildJNILinux') {
	dependsOn tasks.copyJNIFiles
	group = "Custom"
	description = "Builds Java and Linux JNI binary for scenegraph"
	doLast {
		def build = new File(project.buildDir, 'cpp')
		def dist = file('dist')
		def src = file('src/main/cpp')
		def includes = [
			src.absolutePath,
			dist.absolutePath,
			build.absolutePath,
			file('/usr/lib/jvm/java-11-openjdk-amd64/include'),
			file('/usr/lib/jvm/java-11-openjdk-amd64/include/linux'),
			file('/usr/include/freetype2')]

		mkdir(build)

		def arch = "x86_64"
		ant.echo("Generating libscenegraph for Linux ${arch}...")
		ant.exec(executable: 'gcc', dir: dist, logError: true, failonerror: true) {
			arg(value: '-O')
			arg(value: '-fPIC')
			arg(value: '-shared')
			arg(value: '-DUSE_FASTDXT')
			includes.each { arg(value: "-I${it}") }
			src.eachFileMatch({ it.endsWith('.c') || it.endsWith('.cpp')} ) { file ->
				println "Compiling $file..."
				arg(value: file)
			}
			arg(value: '-L')
			arg(value: '/usr/lib/x86_64-linux-gnu')
			arg(value: '-lpng')
			arg(value: '-lGL')
			arg(value: '-lGLU')
			arg(value: '-lstdc++')
			arg(value: '-lfreetype')
			arg(value: '-ljpeg')
			arg(value: '-ltiff')
			arg(value: '-lsquish')
			arg(value: '-o')
			arg(value: 'libscenegraph.so')
		}
	}
}


// The tasks below cross-compile 64-bit Windows scenegraph DLL on Mac or Linux systems
// with a prepared MXE cross-compile environment (https://mxe.cc/).
//
// See full instructions in scenegraph/README.md.

tasks.register('crossBuildJNIWin') {
	dependsOn tasks.copyJNIFiles
	group = "Custom"
	description = "Cross-builds Java and Windows JNI binary for scenegraph"
	doLast {
		def build = new File(project.buildDir, 'cpp_cross_compile')
		def src = file('src/main/cpp')
		def include_dirs = [
			src.absolutePath,
			file('/opt/mxe/usr/x86_64-w64-mingw32.static/include').absolutePath,
			file('/opt/mxe/usr/x86_64-w64-mingw32.static/include/freetype2').absolutePath,
			file('/Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Home/include').absolutePath,
			file('/Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Home/include/darwin').absolutePath,
			file('/Users/lcdev/Downloads/libsquish-1.15').absolutePath
		]

		mkdir(build)
		def toolchain_path = file('/opt/mxe/usr/bin/').absolutePath
		src.eachFileMatch({ it.endsWith('.c') || it.endsWith('.cpp')} ) { file ->
			crossCompileWin(file, include_dirs, build, toolchain_path)
		}

		linkCrossCompiledWin(build, toolchain_path)

		def dist = file('dist')
		mkdir(dist)
		copy {
			into dist
			from new File(build, 'scenegraph.dll')
		}
	}
}

def crossCompileWin(src, includes, dir, path) {
	def out = src.name.substring(0, src.name.lastIndexOf('.') + 1) + "win64"
	ant {
		echo("Cross-compiling ${src.name} for Windows x86_64")
		exec(executable: path + '/x86_64-w64-mingw32.static-g++', dir: dir, failonerror: true) {
			arg(value: '-c')
			arg(value: '-DUSE_FASTDXT')
			arg(value: '-msse2')
			arg(value: '-O')
			includes.each { arg(value: "-I${it}") }
			arg(value: '-o')
			arg(value: out)
			arg(path: src)
		}
	}
}

def linkCrossCompiledWin(dir, path) {
	ant {
		echo("Linking scenegraph.dll...")
		exec(executable: path + '/x86_64-w64-mingw32.static-g++', dir: dir, failonerror: true) {
			arg(value: '-Wall')
			arg(value: '-shared')
			arg(value: '-o')
			arg(value: 'scenegraph.dll')
			dir.listFiles().findAll { it.name.endsWith('.win64') }.each { arg(path: it) }
			arg(value: '-L/opt/mxe/usr/x86_64-w64-mingw32.static/lib')
			arg(value: '-lpng')
			arg(value: '-lstdc++')
			arg(value: '-lpthread')
			arg(value: '-ltiff')
			arg(value: '-ljpeg')
			arg(value: '-lz')
			arg(value: '-lopengl32')
			arg(value: '-lglu32')
			arg(value: '-lfreetype')
			arg(value: '-lws2_32')
			arg(value: '-llzma')
			arg(value: '-lwebp')
			arg(value: '-lharfbuzz')
			arg(value: '-lbz2')
			arg(value: '-lsharpyuv')
			arg(value: '-lbrotlidec')
			arg(value: '-lbrotlicommon')
			arg(value: '-mwindows')
		}
	}
}